{
	// Place your SecPipeline workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"New Sec Pluging": {
		"scope": "go",
		"prefix": "secpluging",
		"body": [
			"type $1Option = helper.Option[$1]",
			"",
			"type $1 struct {}",
			"",
			"func New$1(opt ...$1Option) $1 {",
				"return helper.Configure($1{}, opt...)",
			"}",
			"",
			"func (mp $1) GetInputSchema() ([]byte, error) {",
				"return nil, nil",
			"}",
			"",
			"func (mp $1) Config([]byte) error {",
				"return nil",
			"}",
			"",
			"func (mp $1) Run(context context.Context, input <-chan *pluginctl.DataStream) (<-chan *pluginctl.DataStream, <-chan error) {",
			"return chantools.NewWithErr(func(c chan<- *pluginctl.DataStream, eC chan<- error, params ...any) {",
				"for {",
					"select {",
					"case <-context.Done():",
						"return",
					"case i, ok  := <-input:",
					"if !ok {",
						"return",
					"}",
					"",
					"}",
				"}",
			"})",
			"}",
			"",
			"func main() {",
				"helper.SetLog(slog.LevelError)",
				"plugin := pluginctl.NewPlugin(\"$2\",",
					"pluginctl.WithPluginImplementation(New$1()),",
				")",
				"plugin.Serve()",
			"}",
		],
		"description": "create a new plugin"
	}
}